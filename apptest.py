import streamlit as st
from pymongo import MongoClient
from datetime import datetime
import pandas as pd
import urllib.parse
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
import smtplib
from email.mime.text import MIMEText

# --- Configurar MongoDB ---
client = MongoClient("mongodb+srv://bibliotecaluizcarlos:terra166@cluster0.uyvqnek.mongodb.net/?retryWrites=true&w=majority")
db = client["fardasDB"]

usuarios_col = db["usuarios"]
cadastro_col = db["cadastro"]
produtos_col = db["produtos"]
movimentacao_col = db["movimentacao"]

# --- Fun칞칫es Auxiliares ---
def autenticar(usuario, senha):
    return usuarios_col.find_one({"usuario": usuario, "senha": senha}) is not None

def alerta_estoque():
    pipeline = [
        {
            "$group": {
                "_id": "$produto",
                "entrada": {"$sum": {"$cond": [{"$eq": ["$tipo", "Entrada"]}, "$quantidade", 0]}},
                "saida": {"$sum": {"$cond": [{"$eq": ["$tipo", "Sa칤da"]}, "$quantidade", 0]}}
            }
        }
    ]
    resultados = list(movimentacao_col.aggregate(pipeline))
    mensagens = []
    for r in resultados:
        saldo = r["entrada"] - r["saida"]
        limite = r["entrada"] * 0.2
        if saldo < limite:
            mensagens.append(f"Produto {r['_id']} est치 abaixo do limite. Saldo atual: {saldo}")
    return mensagens

def enviar_email(destinatario, mensagem):
    try:
        msg = MIMEText(mensagem)
        msg['Subject'] = 'Alerta de Estoque Baixo'
        msg['From'] = 'bibliotecaluizcarlos@gmail.com'
        msg['To'] = destinatario
        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login('bibliotecaluizcarlos@gmail.com', 'terra166')  # Altere para senha de app se necess치rio
            server.send_message(msg)
    except Exception as e:
        st.error(f"Erro ao enviar email: {e}")

def enviar_whatsapp(numero, mensagem):
    numero = numero.replace("(", "").replace(")", "").replace("-", "").replace(" ", "")
    texto = urllib.parse.quote(mensagem)
    url = f"https://wa.me/55{numero}?text={texto}"
    st.markdown(f"[Abrir WhatsApp]({url})")

def calcular_estoque():
    pipeline = [
        {
            "$group": {
                "_id": "$produto",
                "entrada": {"$sum": {"$cond": [{"$eq": ["$tipo", "Entrada"]}, "$quantidade", 0]}},
                "saida": {"$sum": {"$cond": [{"$eq": ["$tipo", "Sa칤da"]}, "$quantidade", 0]}}
            }
        }
    ]
    resultados = list(movimentacao_col.aggregate(pipeline))
    lista = []
    for r in resultados:
        saldo = r["entrada"] - r["saida"]
        lista.append({
            "produto": r["_id"],
            "entrada": r["entrada"],
            "saida": r["saida"],
            "saldo": saldo,
        })
    return pd.DataFrame(lista)

# --- Interface ---
st.set_page_config(page_title="Sistema de Fardas", layout="centered")
st.title("Controle de Fardas")

if "logado" not in st.session_state:
    st.session_state.logado = False

if not st.session_state.logado:
    with st.form("login"):
        usuario = st.text_input("Usu치rio")
        senha = st.text_input("Senha", type="password")
        if st.form_submit_button("Entrar"):
            if autenticar(usuario, senha):
                st.session_state.logado = True
                st.rerun()
            else:
                st.error("Usu치rio ou senha inv치lido")
else:
    mensagens = alerta_estoque()
    for msg in mensagens:
        st.warning(msg)
        cadastros = list(cadastro_col.find({}, {"email": 1, "telefone": 1}))
        for cadastro in cadastros:
            if cadastro.get("email"):
                enviar_email(cadastro["email"], msg)
            if cadastro.get("telefone"):
                enviar_whatsapp(cadastro["telefone"], msg)

    menu = st.sidebar.selectbox("Menu", ["Cadastro Geral", "Movimenta칞칚o", "Estoque", "Relat칩rios", "Importar Estoque"])

    if menu == "Cadastro Geral":
        st.subheader("Cadastro de Funcion치rios")
        with st.form("cadastro"):
            nome = st.text_input("Nome")
            setor = st.text_input("Setor")
            funcao = st.text_input("Fun칞칚o")
            email = st.text_input("Email")
            telefone = st.text_input("Telefone")
            if st.form_submit_button("Salvar"):
                if nome and setor and funcao and email and telefone:
                    cadastro_col.insert_one({
                        "nome": nome,
                        "setor": setor,
                        "funcao": funcao,
                        "email": email,
                        "telefone": telefone
                    })
                    st.success("Cadastrado com sucesso!")
                else:
                    st.error("Todos os campos s칚o obrigat칩rios")

    elif menu == "Movimenta칞칚o":
        st.subheader("Entrada e Sa칤da de Produtos")
        with st.form("movimento"):
            data = st.date_input("Data", datetime.now())
            tipo = st.selectbox("Tipo", ["Entrada", "Sa칤da"])
            funcionarios = [f["nome"] for f in cadastro_col.find({}, {"nome": 1})]
            funcionario = st.selectbox("Funcion치rio", funcionarios if funcionarios else ["Nenhum funcion치rio cadastrado"])
            produtos_cadastrados = [p["produto"] for p in produtos_col.find({}, {"produto": 1})]
            produto = st.selectbox("Produto", produtos_cadastrados if produtos_cadastrados else ["Nenhum produto cadastrado"])
            quantidade = st.number_input("Quantidade", min_value=1, step=1)
            if st.form_submit_button("Registrar"):
                if data and tipo and funcionario and produto and quantidade:
                    movimentacao_col.insert_one({
                        "data": data.strftime("%Y-%m-%d"),
                        "tipo": tipo,
                        "funcionario": funcionario,
                        "produto": produto,
                        "quantidade": quantidade
                    })
                    produtos_col.update_one({"produto": produto}, {"$set": {"produto": produto}}, upsert=True)
                    st.success("Movimenta칞칚o registrada!")
                else:
                    st.error("Todos os campos s칚o obrigat칩rios")

    elif menu == "Estoque":
        st.subheader("Estoque Atual")
        df = calcular_estoque()
        if not df.empty:
            def situacao(row):
                limite = row['entrada'] * 0.2
                if row['saldo'] <= 0:
                    return '游댮 Cr칤tico'
                elif row['saldo'] < limite:
                    return '游리 Aten칞칚o'
                else:
                    return '游릭 OK'
            df['situa칞칚o'] = df.apply(situacao, axis=1)
            st.dataframe(df)
        else:
            st.info("Nenhum dado de movimenta칞칚o encontrado.")

    elif menu == "Relat칩rios":
        st.subheader("Relat칩rios")
        opcao = st.selectbox("Tipo de Relat칩rio", ["Por Quantidade", "Por Local", "Por Funcion치rio"])
        df = calcular_estoque()
        if df.empty:
            st.info("Nenhum dado para gerar relat칩rio.")
        else:
            def situacao(row):
                limite = row['entrada'] * 0.2
                if row['saldo'] <= 0:
                    return '游댮 Cr칤tico'
                elif row['saldo'] < limite:
                    return '游리 Aten칞칚o'
                else:
                    return '游릭 OK'
            df['situa칞칚o'] = df.apply(situacao, axis=1)
            filtro_produto = st.multiselect("Filtrar por produto", options=df['produto'].tolist())
            filtro_situacao = st.multiselect("Filtrar por situa칞칚o", options=df['situa칞칚o'].unique().tolist())
            if filtro_produto:
                df = df[df['produto'].isin(filtro_produto)]
            if filtro_situacao:
                df = df[df['situa칞칚o'].isin(filtro_situacao)]
            st.bar_chart(df.set_index("produto")["saldo"])
            st.dataframe(df)
            if st.button("Gerar PDF"):
                nome_pdf = f"relatorio_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
                cpdf = canvas.Canvas(nome_pdf, pagesize=A4)
                cpdf.setFont("Helvetica-Bold", 16)
                cpdf.drawString(2*cm, 28*cm, "Relat칩rio de Estoque de Fardas")
                cpdf.setFont("Helvetica", 12)
                y = 26*cm
                for i, row in df.iterrows():
                    texto = f"{row['produto']} - Entrada: {row['entrada']} - Sa칤da: {row['saida']} - Saldo: {row['saldo']} - Situa칞칚o: {row['situa칞칚o']}"
                    cpdf.drawString(2*cm, y, texto)
                    y -= 0.6*cm
                    if y < 2*cm:
                        cpdf.showPage()
                        y = 28*cm
                cpdf.drawString(2*cm, 2.5*cm, "Assinatura do respons치vel: __________________________")
                cpdf.drawRightString(19*cm, 2.5*cm, datetime.now().strftime("Gerado em: %d/%m/%Y"))
                cpdf.save()
                with open(nome_pdf, "rb") as f:
                    st.download_button("Baixar Relat칩rio", f, file_name=nome_pdf)

    elif menu == "Importar Estoque":
        st.subheader("Importar Estoque via Arquivo .TXT ou .CSV")
        arquivo = st.file_uploader("Escolha o arquivo .txt ou .csv", type=["txt", "csv"])
        delimitador = st.selectbox("Delimitador", [";", ",", "\\t"])
        if arquivo is not None:
            delimitador_real = {";": ";", ",": ",", "\\t": "\t"}[delimitador]
            try:
                df_import = pd.read_csv(arquivo, delimiter=delimitador_real)
                df_import.columns = [col.strip().lower().replace("colaborador", "funcionario").replace("qtd", "quantidade") for col in df_import.columns]
                st.dataframe(df_import)
                if st.button("Importar para o Sistema"):
                    erros = []
                    for _, row in df_import.iterrows():
                        try:
                            produto = str(row['produto'])
                            tipo = str(row['tipo'])
                            data = str(row['data'])
                            funcionario = str(row['funcionario'])
                            quantidade = int(row['quantidade'])
                            if cadastro_col.find_one({"nome": funcionario}) is None:
                                erros.append(f"Funcion치rio '{funcionario}' n칚o cadastrado.")
                                continue
                            movimentacao_col.insert_one({
                                "data": data,
                                "tipo": tipo,
                                "funcionario": funcionario,
                                "produto": produto,
                                "quantidade": quantidade
                            })
                            produtos_col.update_one({"produto": produto}, {"$set": {"produto": produto}}, upsert=True)
                        except Exception as erro:
                            erros.append(f"Erro na linha: {row.to_dict()} - Erro: {erro}")
                    if erros:
                        st.error("Algumas linhas n칚o foram importadas:")
                        for e in erros:
                            st.error(e)
                    else:
                        st.success("Importa칞칚o conclu칤da com sucesso!")
            except Exception as e:
                st.error(f"Erro ao ler o arquivo: {e}")
